name: MCAG PR Check

on:
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write   # nötig zum Kommentieren

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -U pip pyyaml

      - name: Run patch tests
        run: |
          . .venv/bin/activate
          python mcag_starter/scripts/evaluate.py \
            --suite 'mcag_phase0_patch/tests/tests_patch_v*.yaml' \
            --output reports/patch_latest_results.json

      - name: Upload test report (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-test-report
          path: reports/patch_latest_results.json
          if-no-files-found: warn

      # --- PR-Kommentar ------------------------------------------------------
      - name: Comment test result in PR
        if: always()
        uses: actions/github-script@v7
        env:
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            const fs = require('fs');

            // Defaultwerte, falls der Report fehlt
            let passed = 0, total = 0, passRate = 0;
            let durationSec = null;

            try {
              const raw = fs.readFileSync('reports/patch_latest_results.json', 'utf8');
              const json = JSON.parse(raw);
              const s = json.summary || {};
              passed = Number(s.passed || 0);
              total  = Number(s.total  || 0);
              passRate = total > 0 ? (passed / total) : 0;

              // Dauer ggf. aus unterschiedlichen Feldern lesen
              const d = (s.duration_sec !== undefined ? s.duration_sec : s.duration);
              if (d !== undefined && d !== null && !Number.isNaN(Number(d))) {
                durationSec = Number(d);
              }
            } catch (e) {
              // Report nicht lesbar -> generischer Kommentar
            }

            // Strenge Regel: nur grün bei 100 %
            const ok = (total > 0) && (passed === total);

            const lines = [
              `**${ok ? "✅ MCAG PR Check: Tests passed" : "❌ MCAG PR Check: Tests failed"}**`,
              '',
              `- Passed: **${passed}/${total}** (${(passRate*100).toFixed(2)}%)`,
              `- Run: ${process.env.RUN_URL}`
            ];
            if (Number.isFinite(durationSec)) {
              lines.push(`- Dauer: ${durationSec}s`);
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: lines.join('\n')
            });
