name: MCAG PR Check

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: ["**"]
  push:
    branches: ["main"]

permissions:
  contents: read
  pull-requests: write   # nötig zum Kommentieren
concurrency:
  group: mcag-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -U pip pyyaml

      - name: Run patch tests
        run: |
          . .venv/bin/activate
          python mcag_starter/scripts/evaluate.py \
            --suite 'mcag_phase0_patch/tests/tests_patch_v*.yaml' \
            --output reports/patch_latest_results.json

      - name: Upload test report (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-test-report
          path: reports/patch_latest_results.json
          if-no-files-found: warn

      - name: Comment test result in PR
        if: always()
        uses: actions/github-script@v7
        env:
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            const fs = require('fs');

            // Standardwerte
            let passed = 0, total = 0, passRate = 0;
            let durationSec = 0; // Default = 0

            try {
              const raw = fs.readFileSync('reports/patch_latest_results.json', 'utf8');
              const report = JSON.parse(raw);
              const s = report.summary || {};
              passed = Number(s.passed || 0);
              total  = Number(s.total  || 0);
              passRate = total > 0 ? (passed / total) : 0;

              // Dauer, falls vorhanden
              const d = (s.duration_sec !== undefined ? s.duration_sec : s.duration);
              if (d !== undefined && d !== null && !Number.isNaN(Number(d))) {
                durationSec = Number(d);
              }
            } catch (e) {
              // Report fehlt oder ist nicht lesbar
            }

            // Regel: mind. 95 % Tests bestanden
            const ok = total > 0 && passRate >= 0.95;

            const title = ok
              ? "✅ MCAG PR Check: Tests passed"
              : "❌ MCAG PR Check: Tests failed";

            const body = [
              `**${title}**`,
              ``,
              `- Passed: **${passed}/${total}** (${(passRate*100).toFixed(2)}%)`,
              `- Dauer: ${durationSec}s`,
              `- Run: ${process.env.RUN_URL}`,
              ``,
              `> Workflow: MCAG PR Check / test`
            ].join('\n');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

# noop: trigger PR check at 2025-09-11 20:05:38 UTC
