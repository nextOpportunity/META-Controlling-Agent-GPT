name: MCAG Promote

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write   # fÃ¼r Release-Erstellung
  actions: read

concurrency:
  group: promote-${{ github.ref }}
  cancel-in-progress: false

jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -U pip pyyaml

      - name: Ensure reports dir
        run: mkdir -p reports

      - name: Run patch tests
        run: |
          . .venv/bin/activate
          python mcag_starter/scripts/evaluate.py \
            --suite 'mcag_phase0_patch/tests/tests_patch_v*.yaml' \
            --output reports/patch_latest_results.json

      - name: Alpha gate
        run: |
          . .venv/bin/activate
          python scripts/promote.py \
            --phase alpha \
            --report reports/patch_latest_results.json \
            --incidents incidents_sample.json \
            --latency_p95_ms 650 \
            --guardrail_violation_rate 0.002

      - name: Beta gate
        run: |
          . .venv/bin/activate
          python scripts/promote.py \
            --phase beta \
            --report reports/patch_latest_results.json \
            --incidents incidents_sample.json \
            --latency_p95_ms 480 \
            --guardrail_violation_rate 0.002

      - name: Prod gate
        run: |
          . .venv/bin/activate
          python scripts/promote.py \
            --phase prod \
            --report reports/patch_latest_results.json \
            --incidents incidents_sample.json \
            --latency_p95_ms 390 \
            --guardrail_violation_rate 0.001

      - name: Create release note
        env:
          SHA: ${{ github.sha }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          SHORT_SHA=${SHA::7}
          {
            echo "Release-Notiz"
            echo "Date: $(date '+%Y-%m-%d %H:%M:%S')"
            echo "Repo: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY"
            echo "Commit: $SHORT_SHA ($SHA)"
            echo "Run: $RUN_URL"
            echo "Patch-Report: reports/patch_latest_results.json"
            echo "Incidents: incidents_sample.json"
            echo "Gates: Alpha, Beta, Prod (siehe Job-Log)"
          } > RELEASE_NOTE.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mcag-promote-artifacts
          path: |
            reports/patch_latest_results.json
            RELEASE_NOTE.txt
          if-no-files-found: error

      # Optional: Tag + GitHub Release (leicht entfernbar)
      - name: Prepare tag
        id: tag
        run: |
          TS=$(date +'%Y%m%d-%H%M%S')
          TAG="mcag-${TS}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ${{ steps.tag.outputs.tag }}
          body_path: RELEASE_NOTE.txt
          files: |
            RELEASE_NOTE.txt
            reports/patch_latest_results.json
